/*
 * U2A4_ChrisDeVisser_StudentsView.java
 */

package u2a4_chrisdevisser_students;

import com.sun.jna.Pointer;
import java.awt.Dialog.ModalityType;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;

/**
 * The application's main frame.
 */
public class U2A4_ChrisDeVisser_StudentsView extends FrameView {
    //inner structure; only useful for this assignment
    public class Student {
        public String firstName;
        public String lastName;
        public int[] testMarks = new int[NUM_TESTS];
        //NOTE: ^This is an array. There is an array of objects of this class.
        //       Therefore, it's close enough to a multidimensional array.
        //       I see no point in mindlessly putting tests into a second dimension.

        /**
         * Gets student's full name.
         *
         * @return The student's first and last name
         */
        public String getFullName() {
            return firstName + " " + lastName;
        }

        /**
         * Calculates student's average.
         *
         * @return The average of the student
         */
        public double getAverage() {
            double sum = 0.;
            for (int mark : testMarks) {
                sum += mark;
            }

            return sum / testMarks.length;
        }
    }
    private static final Integer NUM_TESTS = 4;
    private ArrayList<Student> students = new ArrayList<Student>();

    public U2A4_ChrisDeVisser_StudentsView(SingleFrameApplication app) {
        super(app);
        initComponents();

        studentDisplay.setModel(new DefaultListModel<Student>());
        studentDisplay.setCellRenderer(new StudentCellRenderer()); //name+tooltip

        getFrame().setTitle("Student Manager");
        getFrame().addWindowListener(new WindowListener() {
            public void windowOpened(WindowEvent e) { //when window is ready
                //retrieve native handle to frame
                Pointer hwnd = Winapi.getHwndFromFrame(getFrame());
                if (hwnd == Pointer.NULL) {
                    return;
                }

                //turn window into a circle :)
                //(Java's didn't work at first glance and this is more satisfying)
                if (!Winapi.makeWindowElliptical(hwnd, 50, 50, 500, 500)) {
                    return;
                }

                //I would make it moveable (by dragging), but it didn't work out.
                //It might be on a different thread.
                //It was working fine in the C++ test I did before this.
            }

            public void windowClosing(WindowEvent e) {}
            public void windowClosed(WindowEvent e) {}
            public void windowIconified(WindowEvent e) {}
            public void windowDeiconified(WindowEvent e) {}
            public void windowActivated(WindowEvent e) {}
            public void windowDeactivated(WindowEvent e) {}
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        addStudent = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        studentDisplay = new javax.swing.JList();
        removeSelected = new javax.swing.JButton();
        report = new javax.swing.JButton();
        exit = new javax.swing.JButton();

        mainPanel.setName("mainPanel"); // NOI18N

        addStudent.setText("Add Student"); // NOI18N
        addStudent.setName("addStudent"); // NOI18N
        addStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStudentActionPerformed(evt);
            }
        });

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(u2a4_chrisdevisser_students.U2A4_ChrisDeVisser_StudentsApp.class).getContext().getResourceMap(U2A4_ChrisDeVisser_StudentsView.class);
        jScrollPane1.setToolTipText(resourceMap.getString("jScrollPane1.toolTipText")); // NOI18N
        jScrollPane1.setName("jScrollPane1"); // NOI18N

        studentDisplay.setName("studentDisplay"); // NOI18N
        studentDisplay.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                studentDisplayValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(studentDisplay);

        removeSelected.setText("Remove Selected"); // NOI18N
        removeSelected.setToolTipText(resourceMap.getString("removeSelected.toolTipText")); // NOI18N
        removeSelected.setEnabled(false);
        removeSelected.setName("removeSelected"); // NOI18N
        removeSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSelectedActionPerformed(evt);
            }
        });

        report.setText("Report"); // NOI18N
        report.setToolTipText(resourceMap.getString("report.toolTipText")); // NOI18N
        report.setEnabled(false);
        report.setName("report"); // NOI18N
        report.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportActionPerformed(evt);
            }
        });

        exit.setText("Exit"); // NOI18N
        exit.setName("exit"); // NOI18N
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(153, 153, 153)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(removeSelected)
                                    .addComponent(addStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(exit))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(report, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)))
                .addContainerGap(523, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap(81, Short.MAX_VALUE)
                .addComponent(addStudent)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(removeSelected)
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(report)
                .addGap(41, 41, 41)
                .addComponent(exit)
                .addGap(78, 78, 78))
        );

        setComponent(mainPanel);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Prompts for student name and test scores and adds to array.
     *
     * @param evt Unused
     */
    private void addStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStudentActionPerformed
        String fullName = JOptionPane.showInputDialog("Enter the student's first and last name:");
        if (fullName == null) {
            return;
        }
        fullName.trim();

        //Any number of (Name ) or (Name-) (Mary-Jane or Mary Ann), followed by (Name).
        //(Name) begins with a capital and the other 1+ letters are capital or lowercase (DeVisser).
        //Names can be separated by spaces or hyphens. The last name must be preceeded by a space.
        if (!fullName.matches("([A-Z][A-Za-z]+\\-)*([A-Z][A-Za-z]+ )+[A-Z][A-Za-z]+")) {
            JOptionPane.showMessageDialog(null, "Invalid name entered.");
            return;
        }

        String tests = JOptionPane.showInputDialog("Enter the " + NUM_TESTS + " test percentages, separated by spaces:");
        if (tests == null) {
            return;
        }
        tests.trim();

        //NUM_TESTS test scores with spaces in between each.
        //Each test score is [0, 999] (who am I to judge how many bonus marks).
        //A space is appended so that I can repeat the trailing space all times.
        if (!(tests + " ").matches("(([1-9][0-9][0-9]|[1-9][0-9]|[0-9]) ){" + NUM_TESTS + "}")) {
            JOptionPane.showMessageDialog(null, "Invalid test percentages entered.");
            return;
        }

        Student student = new Student();
        String[] names = fullName.split(" "); //divvy up the name

        student.lastName = names[names.length - 1]; //last part is last name

        //rest is first name
        student.firstName = new String();
        for (int i = 0; i < names.length - 1; ++i) {
            student.firstName += names[i] + ' ';
        }

        //divvy up tests; it's known that there are NUM_TESTS integers
        String[] scores = tests.split(" ");
        for (int i = 0; i < NUM_TESTS; ++i) {
            student.testMarks[i] = Integer.parseInt(scores[i]);
        }

        //add to list and array
        students.add(student);
        DefaultListModel<Student> lm = (DefaultListModel<Student>)studentDisplay.getModel();
        lm.addElement(student);
    }//GEN-LAST:event_addStudentActionPerformed

    /**
     * Enables buttons when student is selected.
     *
     * @param evt Unused
     */
    private void studentDisplayValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_studentDisplayValueChanged
        removeSelected.setEnabled(true);
        report.setEnabled(true);
    }//GEN-LAST:event_studentDisplayValueChanged

    /**
     * Exits the application.
     *
     * @param evt Unused
     */
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    /**
     * Removes the selected student from the list.
     *
     * @param evt Unused
     */
    private void removeSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSelectedActionPerformed
        DefaultListModel<Student> lm = (DefaultListModel<Student>)studentDisplay.getModel();

        int[] indices = studentDisplay.getSelectedIndices();
        for (int i = indices.length - 1; i >= 0; --i) {
            lm.remove(indices[i]);
        }

        if (lm.isEmpty()) {
            removeSelected.setEnabled(false);
            report.setEnabled(false);
        }
    }//GEN-LAST:event_removeSelectedActionPerformed

    /**
     * Displays the selected student's marks and average.
     * 
     * @param evt Unused
     */
    /**
     * Displays the class average on each test and overall.
     * 
     * @param evt Unused
     */
    private void reportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportActionPerformed
        List<Student> selected = studentDisplay.getSelectedValuesList();

        JDialog dlg = new JDialog(getFrame(), "Report");
        dlg.setModalityType(ModalityType.APPLICATION_MODAL); //make it modal

        //top = tests, left = names, bottom+right = averages, rest = marks
        JTable table = new JTable(selected.size() + 2, NUM_TESTS + 2);
        
        //fill column headers with test numbers
        for (int i = 1; i < table.getColumnCount() - 1; ++i) {
            table.setValueAt("<html><b>Test " + Integer.toString(i) + "</b></html>", 0, i);
        }
        table.setValueAt("<html><b>Average</b></html>", 0, table.getColumnCount() - 1);

        //fill row headers with student names
        for (int i = 1; i < table.getRowCount() - 1; ++i) {
            table.setValueAt("<html><b>" + selected.get(i - 1).getFullName() + "</b></html>", i, 0);
        }
        table.setValueAt("<html><b>Average</b></html>", table.getRowCount() - 1, 0);

        //fill table with test marks
        for (int row = 1; row <= selected.size(); ++row) {
            for (int col = 1; col < table.getColumnCount() - 1; ++col) {
                table.setValueAt(selected.get(row - 1).testMarks[col - 1], row, col);
            }
        }

        DecimalFormat df = new DecimalFormat("0.00"); //for rounding

        //calculate student averages and add to table
        ArrayList<Double> studentAverages = new ArrayList<Double>();
        for (int i = 1; i <= selected.size(); ++i) {
            Double average = selected.get(i - 1).getAverage();
            studentAverages.add(average);
            table.setValueAt("<html><b>" + df.format(average) + "</b></html>", i, table.getColumnCount() - 1);
        }

        //calculate test averages and add to table
        for (int i = 1; i <= NUM_TESTS; ++i) {
            Double average = 0.;
            for (int j = 1; j <= selected.size(); ++j) {
                average += selected.get(j - 1).testMarks[i - 1];
            }
            average /= selected.size();

            table.setValueAt("<html><b>" + df.format(average) + "</b></html>", table.getRowCount() - 1, i);
        }

        //display the overall average
        Double overallAverage = 0.;
        for (Double average : studentAverages) {
            overallAverage += average;
        }
        table.setValueAt("<html><b>" + df.format(overallAverage / studentAverages.size()) + "</b></html>", table.getRowCount() - 1, table.getColumnCount() - 1);

        table.setEnabled(false);
        JScrollPane scroll = new JScrollPane(table);
        table.setTableHeader(null); //added with scroll
        
        dlg.add(scroll);
        dlg.setSize(dlg.getPreferredSize().width, dlg.getPreferredSize().height);
        dlg.setLocationRelativeTo(null); //centre it
        dlg.setVisible(true);
    }//GEN-LAST:event_reportActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addStudent;
    private javax.swing.JButton exit;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton removeSelected;
    private javax.swing.JButton report;
    private javax.swing.JList studentDisplay;
    // End of variables declaration//GEN-END:variables
}
