package u2a6_chrisdevisser_employeerecords;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.IllegalComponentStateException;
import java.awt.Toolkit;
import java.io.FileNotFoundException;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java_utilities.Serializer;
import java_utilities.jna.Sapi;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 * A managing interface for employee records.
 * It features the addition, removal, and display of employees.
 * The employees are saved in between runs.
 *
 * @author Chris DeVisser
 */
public class Gui extends javax.swing.JFrame implements EmployeeGuiClosedCallback {
    /**
     * Maps IDs to employees.
     */
    private Map<Integer, Employee> _employees = new HashMap<Integer, Employee>();

    /**
     * Serializes and deserializes the list of employees.
     */
    Serializer _serializer = new Serializer("employees.dat");

    /** Creates new form Gui */
    public Gui() {
        initComponents();
        setLocationRelativeTo(null);
        setVisible(true);

        getRootPane().setDefaultButton(go);

        empList.setModel(new DefaultListModel<Integer>());

        load();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        idInput = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        go = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        empList = new javax.swing.JList<Integer>();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Employee Manager");
        setResizable(false);

        mainPanel.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
                windowMoved(evt);
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel1.setText("Enter the empoyee ID:");

        go.setText("Go");
        go.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonLookupEmployee(evt);
            }
        });

        empList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(empList);

        jButton1.setText("Remove");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remove(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(idInput, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                        .addComponent(go, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(idInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(go))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Saves employee data to file.
     */
    public void save() {
        Object[] emps = {_employees};
        try {
            _serializer.serialize(Arrays.asList(emps));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error saving employee data.");
        }
    }

    /**
     * Loads employee data from file.
     */
    public void load() {
        try {
            List<Object> emps = _serializer.deserialize();

            if (emps.size() == 1) {
                _employees = (Map<Integer, Employee>)emps.get(0);

                DefaultListModel<Integer> lm = (DefaultListModel<Integer>)empList.getModel();
                Integer[] keys = new Integer[_employees.keySet().size()];
                _employees.keySet().toArray(keys);
                Arrays.sort(keys);

                for (Integer key : keys) {
                    lm.addElement(key);
                }
            }
        } catch (FileNotFoundException ex) {
            //ignore in case none made
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error loading employee data.");
        }
    }

    /**
     * Changes the background colour of the window based on position.
     * Horizontal changes the hue, and vertical changes the brightness.
     *
     * @param evt Unused
     */
    private void windowMoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_windowMoved
        try {
            Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
            double w = screen.getWidth() - getWidth();
            double h = screen.getHeight() - getHeight();

            //limit imagined window position from 1 to width/height
            double x = Math.min(Math.max(getLocationOnScreen().x, 1), w);
            double y = Math.min(Math.max(getLocationOnScreen().y, 1), h);

            //for background colour
            double r = 0, g = 0, b = 0;

            //read downwards for RGB colours at different horizontal points
            double[] rs = {0, 1, 1, 0, 0, 0, 1, 1};
            double[] gs = {0, 0, 1, 1, 1, 0, 0, 1};
            double[] bs = {0, 0, 0, 0, 1, 1, 1, 1};

            final int sects = rs.length - 1;

            //loop through each section of the screen
            for (int i = 1; i < rs.length; ++i) {
                if (x >= (i-1) * w/sects && x < i * w/sects) {
                    //calculate difference between now and next step
                    double rdiff = rs[i] - rs[i-1];
                    double gdiff = gs[i] - gs[i-1];
                    double bdiff = bs[i] - bs[i-1];

                    //take how far the window is through that section
                    //and progress that far to the next colour value
                    r = rs[i-1] + rdiff * sects/w *(x - (i - 1) * w/sects);
                    g = gs[i-1] + gdiff * sects/w *(x - (i - 1) * w/sects);
                    b = bs[i-1] + bdiff * sects/w *(x - (i - 1) * w/sects);
                }
            }

            //make white if off right side
            if (x >= w) {
                r = rs[sects];
                g = gs[sects];
                b = bs[sects];
            }

            //change brightness with vertical position
            double percent = y/h;
            r *= percent;
            g *= percent;
            b *= percent;

            mainPanel.setBackground(new Color((float)r, (float)g, (float)b));
        } catch (IllegalComponentStateException ex){} //ignore if race fails
    }//GEN-LAST:event_windowMoved

    /**
     * Saves the employee information.
     *
     * @param saved True if the Save and Exit button was pressed to exit
     * @param id The ID of the employee
     * @param first The first name of the employee
     * @param last The last name of the employee
     * @param salary The annual salary of the employee, in dollars
     * @param start The starting date of the employee
     */
    public void invoke(boolean saved, int id, String first, String last, int salary, Date start) {
        if (saved) {
            if (_employees.containsKey(id)) {
                _employees.get(id).setAnnualSalary(salary);
            } else {
                _employees.put(id, new Employee(first, last, salary, start));

                //add ID to list and sort
                DefaultListModel<Integer> lm = (DefaultListModel<Integer>)empList.getModel();
                lm.addElement(id);
                Object[] ids = lm.toArray();
                Arrays.sort(ids);

                lm.clear();
                for (int i = 0; i < ids.length; ++i) {
                    lm.addElement((Integer)ids[i]);
                }
            }

            save();
        }
    }

    /**
     * Creates or displays an employee.
     *
     * @param evt Unused
     */
    private void goButtonLookupEmployee(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonLookupEmployee
        int id = -1;
        try {
            id = Integer.parseInt(idInput.getText());
        } catch (NumberFormatException ex){} //keep at -1

        if (id < 0) {
            JOptionPane.showMessageDialog(this, "Please enter a valid ID.");
            return;
        }

        if (_employees.containsKey(id)) {
            new EmployeeGui(id, _employees.get(id), this);
        } else {
            new EmployeeGui(id, null, this);
        }
    }//GEN-LAST:event_goButtonLookupEmployee

    /**
     * Removes an employee from the list.
     *
     * @param evt Unused
     */
    private void remove(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remove
        int id = -1;
        try {
            id = Integer.parseInt(idInput.getText());
        } catch (NumberFormatException ex){} //keep at -1

        if (id < 0) {
            JOptionPane.showMessageDialog(this, "Please enter a valid ID.");
            return;
        }

        _employees.remove(id);

        DefaultListModel<Integer> lm = (DefaultListModel<Integer>)empList.getModel();
        lm.removeElement(id);

        save();
    }//GEN-LAST:event_remove

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<Integer> empList;
    private javax.swing.JButton go;
    private javax.swing.JTextField idInput;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainPanel;
    // End of variables declaration//GEN-END:variables

}
